<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>the log of study from jy</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-16T16:50:50.339Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jiang Yi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nlp</title>
    <link href="http://example.com/2021/05/15/nlp/"/>
    <id>http://example.com/2021/05/15/nlp/</id>
    <published>2021-05-15T12:04:11.713Z</published>
    <updated>2021-05-16T16:50:50.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h1><p>有关pytorch的学习网站：<a href="https://pytorch-cn.readthedocs.io/zh/latest/">https://pytorch-cn.readthedocs.io/zh/latest/</a><br>另外一些有关pytorch的知识点如下</p><h2 id="PyTorch中的Tensor张量"><a href="#PyTorch中的Tensor张量" class="headerlink" title="PyTorch中的Tensor张量"></a>PyTorch中的Tensor张量</h2><h3 id="1-Tensor张量"><a href="#1-Tensor张量" class="headerlink" title="1.Tensor张量"></a>1.Tensor张量</h3><p>我们可以将这个理解为矩阵</p><h3 id="2-Tensor数据类型"><a href="#2-Tensor数据类型" class="headerlink" title="2.Tensor数据类型"></a>2.Tensor数据类型</h3><p>（1）torch.FloatTensor()参数可以直接是一个元组然后转化为Tensor；或者是两个参数，n，m直接代表矩阵的维度已经形状。<br>（2）torch.IntTensor，用于生成数据类型为整形的tensor。</p><h3 id="3-Tensor常用函数"><a href="#3-Tensor常用函数" class="headerlink" title="3.Tensor常用函数"></a>3.Tensor常用函数</h3><p>（1）torch.rand    # 用于生成数据类型为浮点型且维度指定的随机Tensor，和在Numpy中使用numpy.rand生成随机数的方法类似，随机生成的浮点数据在0~1区间均匀分布。</p><p>（2）torch.randn    # 用于生成数据类型为浮点型且维度指定的随机Tensor，和在Numpy中使用numpy.randn生成随机数的方法类似，随机生成的浮点数的取值满足均值为0，方差为1的正太分布。</p><p>（3）torch.range    # 用于生成数据类型为浮点型且自定义其实范围和结束范围的Tensor，所以传递给torch.range的参数有三个，分别是范围的起始值，范围的结束值和步长，其中，步长用于指定从起始值到结束值的每步的数据间隔。</p><p>（4）torch.zeros    # 用于生成数据类型为浮点型且维度指定的Tensor，不过这个浮点型的Tensor中的元素值全部为0。</p><p>（5）torch.abs    # 将参数传递到torch.abs后返回输入参数的绝对值作为输出，输出参数必须是一个Tensor数据类型的变量。</p><p>（6）torch.add    # 将参数传递到torch.add后返回输入参数的求和结果作为输出，输入参数既可以全部是Tensor数据类型的变量，也可以是一个Tensor数据类型的变量，另一个是标量。</p><p>（7）torch.clamp    # 对输入参数按照自定义的范围进行裁剪，最后将参数裁剪的结果作为输出。所以输入参数一共有三个，分别是需要进行裁剪的Tensor数据类型的变量、裁剪的上边界和裁剪的下边界，具体的裁剪过程是：使用变量中的每个元素分别和裁剪的上边界及裁剪的下边界的值进行比较，如果元素的值小于裁剪的下边界的值，该元素就被重写成裁剪的下边界的值；同理，如果元素的值大于裁剪的上边界的值，该元素就被重写成裁剪的上边界的值。</p><p>（8）torch.div    # 将参数传递到torch.div后返回输入参数的求商结果作为输出，同样，参与运算的参数可以全部是Tensor数据类型的变量，也可以是Tensor数据类型的变量和标量的组合。(两个参数，第一个是被除数，第二个是除数)</p><p>（9）torch.pow    # 将参数传递到torch.pow后返回输入参数的求幂结果作为输出，参与运算的参数可以全部是Tensor数据类型的变量，也可以是Tensor数据类型的变量和标量的组合。</p><p>（10）torch.mul    # 将参数传递到 torch.mul后返回输入参数求积的结果作为输出，参与运算的参数可以全部是Tensor数据类型的变量，也可以是Tensor数据类型的变量和标量的组合。</p><p>（11）torch.mm    # 将参数传递到 torch.mm后返回输入参数的求积结果作为输出，不过这个求积的方式和之前的torch.mul运算方式不太样，torch.mm运用矩阵之间的乘法规则进行计算，所以被传入的参数会被当作矩阵进行处理，参数的维度自然也要满足矩阵乘法的前提条件，即前一个矩阵的行数必须和后一个矩阵的列数相等，否则不能进行计算。</p><p>（12）torch.mv    # 将参数传递到torch.mv后返回输入参数的求积结果作为输出，torch.mv运用矩阵与向量之间的乘法规则进行计算，被传入的参数中的第1个参数代表矩阵，第2个参数代表向量，顺序不能颠倒。<br>（以上基本都是二元运算，前面的参数是被运算的数，后面的是对前面多运算的参数,或者这个torch的实例直接去运行)</p><p>（13）torch.view    # 改变一个 tensor 的大小或者形状。</p><h2 id="神经网络堆叠"><a href="#神经网络堆叠" class="headerlink" title="神经网络堆叠"></a>神经网络堆叠</h2><h3 id="简易神经网络的堆叠"><a href="#简易神经网络的堆叠" class="headerlink" title="简易神经网络的堆叠"></a>简易神经网络的堆叠</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">import torch</span><br><span class="line">batch_n = 100  <span class="comment">#一个批次中输入数据的数量,值是100表示在一个批次中输入100个数据</span></span><br><span class="line">input_data = 1000  <span class="comment">#每个数据包含的数据特征</span></span><br><span class="line">hidden_layer = 100 <span class="comment">#经过隐藏层后保留的数据特征的个数</span></span><br><span class="line">output_data = 10  <span class="comment">#输出数据表示分类结果值的数量</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#初始化权重</span></span><br><span class="line">x = torch.randn(batch_n, input_data) <span class="comment">#输入层维度为（100,1000）</span></span><br><span class="line">y = torch.randn(batch_n, output_data) <span class="comment">#输出层维度为（100,10）</span></span><br><span class="line">w1 = torch.randn(input_data, hidden_layer) <span class="comment">#输入层到隐藏层的权重参数维度为（1000,100）</span></span><br><span class="line">w2 = torch.randn(hidden_layer, output_data) <span class="comment">#隐藏层到输出层的权重参数维度为（100,10）</span></span><br><span class="line">epoch_n = 20  <span class="comment">#训练的次数</span></span><br><span class="line">learning_rate = 1e-6 <span class="comment">#学习效率</span></span><br><span class="line"><span class="comment">#梯度下降优化神经网络参数</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(epoch_n):</span><br><span class="line">    h1 = x.mm(w1)  <span class="comment"># 100*1000</span></span><br><span class="line">    h1 = h1.clamp(min=0) <span class="comment">#使用clamp方法进行裁剪，将小于零的值全部重新赋值于0</span></span><br><span class="line">    y_pred = h1.mm(w2)  <span class="comment"># 100*10</span></span><br><span class="line">    <span class="comment"># print(y_pred)</span></span><br><span class="line">    loss = (y_pred - y).pow(2).sum()  <span class="comment">#均方误差计算损失</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch:&#123;&#125; , Loss:&#123;:.4f&#125;&quot;</span>.format(epoch, loss))</span><br><span class="line">    gray_y_pred = 2 * (y_pred - y)</span><br><span class="line">    gray_w2 = h1.t().mm(gray_y_pred)  <span class="comment">#.t()是将Tensor进行转置</span></span><br><span class="line">    grad_h = gray_y_pred.clone()</span><br><span class="line">    grad_h = grad_h.mm(w2.t())</span><br><span class="line">    grad_h.clamp_(min=0)</span><br><span class="line">    grad_w1 = x.t().mm(grad_h)  <span class="comment">#权重参数对应的梯度</span></span><br><span class="line">    w1 -= learning_rate * grad_w1 <span class="comment">#根据学习率对w1和w2的权重参数进行更新</span></span><br><span class="line">    w2 -= learning_rate * gray_w2</span><br></pre></td></tr></table></figure><h3 id="2-Pytorch自动梯度"><a href="#2-Pytorch自动梯度" class="headerlink" title="2.Pytorch自动梯度"></a>2.Pytorch自动梯度</h3><p>autograd package 是PyTorch中所有神经网络的核心，它提供了Tensors上所有运算的自动求导功能，通过torch.autograd包，可以使模型参数自动计算在优化过程中需要用到的梯度值，在很大程度上帮助降低了实现后向传播代码的复杂度。</p><p>torch.autograd 包的主要功能是完成神经网络后向传播中的链式求导。</p><p>autograd.Variable 是这个package的中心类。它打包了一个Tensor，并且支持几乎所有运算。一旦你完成了你的计算，可以调用.backward()，所有梯度就可以自动计算。</p><h3 id="3-使用自动梯度和自定义函数搭建简易神经网络模型"><a href="#3-使用自动梯度和自定义函数搭建简易神经网络模型" class="headerlink" title="3.使用自动梯度和自定义函数搭建简易神经网络模型"></a>3.使用自动梯度和自定义函数搭建简易神经网络模型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import torch</span><br><span class="line">from torch.autograd import Variable</span><br><span class="line"> </span><br><span class="line"><span class="comment">#构建神经网络模型</span></span><br><span class="line">class Model(torch.nn.Module):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super(Model,self).__init__()</span><br><span class="line">        <span class="comment">#super().__init__()</span></span><br><span class="line">    def forward(self,input,w1,w2):</span><br><span class="line">        x=torch.mm(input,w1)</span><br><span class="line">        x=torch.clamp(x,min=0)</span><br><span class="line">        x=torch.mm(x,w2)</span><br><span class="line">        <span class="built_in">return</span> x</span><br><span class="line">    def backward(self):</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line">batch_n = 100 <span class="comment"># 批量输入的数据量</span></span><br><span class="line">hidden_layer = 100 <span class="comment"># 通过隐藏层后输出的特征数</span></span><br><span class="line">input_data = 1000 <span class="comment"># 输入数据的特征个数</span></span><br><span class="line">output_data = 10 <span class="comment"># 最后输出的分类结果数</span></span><br><span class="line"><span class="comment">#初始化权重</span></span><br><span class="line">x = Variable(torch.randn(batch_n, input_data), requires_grad=False)</span><br><span class="line">y = Variable(torch.randn(batch_n, output_data), requires_grad=False)</span><br><span class="line">w1 = Variable(torch.randn(input_data, hidden_layer), requires_grad=True)</span><br><span class="line">w2 = Variable(torch.randn(hidden_layer, output_data), requires_grad=True)</span><br><span class="line">epoch_n = 20  <span class="comment">#训练的次数</span></span><br><span class="line">learning_rate = 1e-6 <span class="comment">#学习效率</span></span><br><span class="line">model=Model() <span class="comment">#对模型类进行调用</span></span><br><span class="line"><span class="comment">#模型训练和参数优化</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(epoch_n):</span><br><span class="line">    y_pred = model(x,w1,w2) <span class="comment">#完成对模型预测值的输出</span></span><br><span class="line">    loss = (y_pred - y).pow(2).sum()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Epoch:&#123;&#125; , Loss:&#123;:.4f&#125;&quot;</span>.format(epoch, loss.data))</span><br><span class="line">    loss.backward()  <span class="comment">#自动计算所有梯度</span></span><br><span class="line">    w1.data -= learning_rate * w1.grad.data</span><br><span class="line">    w2.data -= learning_rate * w2.grad.data</span><br><span class="line">    w1.grad.data.zero_()</span><br><span class="line">    w2.grad.data.zero_()</span><br></pre></td></tr></table></figure><h1 id="词向量学习"><a href="#词向量学习" class="headerlink" title="词向量学习"></a>词向量学习</h1><h2 id="One-hot编码"><a href="#One-hot编码" class="headerlink" title="One hot编码"></a>One hot编码</h2><h3 id="什么是One-hot编码"><a href="#什么是One-hot编码" class="headerlink" title="什么是One hot编码"></a>什么是One hot编码</h3><p>one-hot编码，又称独热编码、一位有效编码。其方法是使用N位状态寄 存器来对N个状态进行编码，每个状态都有它独立的寄存器位，并且在 任意时候，其中只有一位有效。举个例子，假设我们有四个样本(行)， 每个样本有三个特征(列)，如下图:<br>|         | Feature_1 | Feature_2 | Feature_3 |<br>| ——- | ——— | ——— | ——— |<br>| Sample1 | 1         | 4         | 3         |<br>| Sample2 | 2         | 3         | 2         |<br>| Sample3 | 1         | 2         | 2         |<br>| Sample4 | 2         | 1         | 1         |</p><p>上图中我们已经对每个特征进行了普通的数字编码:我们的feature_1有两种可能的取值，比如是男/ 女，这里男用1表示，女用2表示。</p><p>那么one-hot编码是怎么搞的呢?我们再拿feature_2来说明:这里 feature_2 有4种取值(状态)，我们就用4个状态位来表示这个特 征，one-hot编码就是保证每个样本中的单个特征只有1位处于状态 1，其他的都是0。</p><p>​    1-&gt;0001</p><p>​    2-&gt;0010</p><p>​    3-&gt;0100</p><p>​    4-&gt;1000</p><p>对于2种状态、3种状态、甚至更多状态都可以这样表示，所以我们可以 得到这些样本特征的新表示，入下图:</p><table><thead><tr><th></th><th>Feature_1</th><th>Feature_2</th><th>Feature_3</th></tr></thead><tbody><tr><td>Sample1</td><td>01</td><td>1000</td><td>100</td></tr><tr><td>Sample2</td><td>10</td><td>0100</td><td>010</td></tr><tr><td>Sample3</td><td>01</td><td>0010</td><td>010</td></tr><tr><td>Sample4</td><td>10</td><td>0001</td><td>001</td></tr></tbody></table><p>one-hot编码将每个状态位都看成一个特征。对于前两个样本我们可以得到它的特征向量分别为</p><p>​    Sample_1-&gt;[0,1,1,0,0,0,1,0,0]</p><p>​    Sample_2-&gt;[1,0,0,1,0,0,0,1,0]</p><h3 id="优缺点分析"><a href="#优缺点分析" class="headerlink" title="优缺点分析"></a>优缺点分析</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>1.解决了分类器不好处理离散数据的问题<br>2.在一定程度上也起到了扩充特征的作用</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>1.在文本特征上缺点就非常突出了<br>2.它是一个提词袋不考虑词与词之间的顺序<br>3.他假 设词与词相互独立（在大多数情况下，词与词是相互影响的）<br>4.他得到的特征是稀疏的</p><h2 id="word2vec相关概念"><a href="#word2vec相关概念" class="headerlink" title="word2vec相关概念"></a>word2vec相关概念</h2><p>2013年Google团队发表了word2vec工具。word2vec工具主要包含两个模型：跳字模型（skip-gram）和连续词袋模型（continuous bag of words，简称CBOW），以及两种高效训练的方法：负采样（negative samoling）和层序softmax（hierarchical softmax），值得一提的是，word2vec词向量可以较好的表达不同词之间类似和类比关系。</p><h2 id="模型："><a href="#模型：" class="headerlink" title="模型："></a>模型：</h2><h3 id="跳字模型："><a href="#跳字模型：" class="headerlink" title="跳字模型："></a>跳字模型：</h3><p>在跳字模型中，我们用一个词来预测它在文本序列周围的词。例如，给定文本“the”，“main”，“hit”，“his”和“son”，跳字模型所关心的是，给定“hit”，生成它的临近词“the”，“main”，“hit”和“son”的概率</p><p><img src="/images/skip-gram-1.PNG" alt="skip-gram-1"></p><p><img src="/images/skip-gram-2.PNG" alt="skip-gram-2"></p><p>注解：看到这里，就引出了word2vec的核心方法，其实就是认为每个词相互独立，用连乘来估计最大似然函数，求解目标函数就是最大化似然函数。上面公式涉及到一个中心词向量v，以及北京词向量u，因此呢很有趣的是，可以用一个input-hidden-output的三层神经网络来建模上面的skip-model。</p><p>Skip-gram可以表示为由输入层（Input）、映射层（Projection）和输出层（Output）组成的神经网络（示意图如下）：<br><img src="/images/skip-gram-3.PNG" alt="skip-gram-3"></p><p>1.输入的表示：输入层中每个词由独热编码方式表示，即所有词均表示成一个N维向量，其中N为词汇表中单词的总数。在向量中，每个词都将与之对应的维度置为1,其余维度的值均为0。<br>2.网络中传播的前向过程：输出层向量的值可以通过隐含层向量（K维），以及连接隐藏层和输出层之间的KxN维权重矩阵计算得到。输出层也是一个N维向量，每维与词汇表中的一个单词相对应。最后对输出层向量应用Softmax激活函数，可以计算每一个单词的生成概率。<br>训练：<br><img src="/images/skip-gram-4.PNG" alt="skip-gram-4"></p><p>注解：上面的公式每一步都推荐推到一下，都很基础。上面只求了对中心词向量v的梯度，同理对背景词向量的梯度，也很容易计算出来。然后就采用传统的梯度下降（一般采用sgd）来训练词向量（其实我们最后关心的是中心词向量来作为词的表征。）</p><p>这里有一个key point说下，也许大家也想到了：词向量到底在哪里呢？回看下前面图1，有两层神经网络，第一层是input层到hidden层，这个中间的weight矩阵就是词向量！！！</p><p>假设input的词汇表N长度是10000，hidden层的长度K=300，左乘以一个10000长度one-hot编码，实际上就是在做一个查表！因此，这个weight矩阵的行就是10000个词的词向量。很有创意是不是？再来看神经网络的第二层，hidden到out层，中间hidden层有没有激活函数呢？从前面建模看到，u和v是直接相乘的，没有激活层，所以hidden是一个线性层。out层就是建模了v和u相乘，结果过一个softmax，那么loss函数是最大似然怎么办呢？其实就是接多个只有一个true label（背景词）的cross entropy loss，把这些loss求和。因为交叉熵就是最大似然估计，如果这点不清楚的可以去网上搜一下，很容易知道。</p><p>所以呢，我们即可用前面常规的最大似然建模来理解如何对u和v的进行优化求解；也完全可以把skip-model套到上面图1这样的一个简单神经网络中，然后就让工具自己来完成weight的训练，就得到了我们想要的中心词向量。</p><p><img src="/images/skip-gram-5.jpg" alt="skip-gram-5"></p><p>下图是对这个过程的简单可视化过程示意图。左边矩阵为词汇表中第四个单词的one-hot表示，右边矩阵表示包含3个神经元的隐藏层的权重矩阵，做矩阵乘法的结果就是从权重矩阵中选取了第四行的权重。因此，这个隐藏层的权重矩阵就是我们最终想要获得的词向量字典[2]</p><p><img src="/images/skip-gram-6.jpg" alt="skip-gram-6"></p><p>获取训练样本：按照上下文窗口的大小从训练文本中提取出词汇对，下面以句子The quick brown fox jumps over the lazy dog为例提取用于训练的词汇对，然后将词汇对的两个单词使用one-hot编码就得到了训练用的train_data和target_data。 下面的图中给出了一些我们的训练样本的例子。我们选定句子“The quick brown fox jumps over lazy dog”，设定我们的窗口大小为2（window_size=2），也就是说我们仅选输入词前后各两个词和输入词进行组合。下图中，蓝色代表input word，方框内代表位于窗口内的单词。Training Samples（输入， 输出）示意图如下：</p><p><img src="/images/skip-gram-7.jpg" alt="skip-gram-7"></p><p>如果使用随机梯度下降，那么在每一次迭代里我们随机采样一个较短的子序列来计算有关该子序列的损失，然后计算梯度来更新模型参数。</p><h3 id="连续词袋模型（CBOW）"><a href="#连续词袋模型（CBOW）" class="headerlink" title="连续词袋模型（CBOW）"></a>连续词袋模型（CBOW）</h3><p>CBOW就倒过来，用多个背景词来预测一个中心词，CBOW对小型数据库比较合适，而Skip-Gram在大型语料中表现更好[2]。但是方法和上面是很像的，因此这里我就放下图。推导的方法是一样的。</p><p><img src="/images/CBOW-1.PNG" alt="CBOW-1"></p><p><img src="/images/CBOW-2.PNG" alt="CBOW-2"><br>我们发现，不论是跳字模型（skip-gram） 还是连续词袋模型（CBOW），我们实际上都是取得input-hidden这个词向量（weight矩阵），而不是后面带着loss那一部分，这样我们也很容易可以对loss（训练方法）进行修改，这个也是下一篇要说的内容：</p><p>问：每次梯度的计算复杂度是多少？当词典很大时，会有什么问题？</p><p>word2vec作者很创造性地提出了2种近似训练方法（分层softmax（hierarchical softmax）和负采样（negative sampling）），得益于此，可以训练大规模语料库。</p><h3 id="近似训练"><a href="#近似训练" class="headerlink" title="近似训练"></a>近似训练</h3><h4 id="负采样"><a href="#负采样" class="headerlink" title="负采样"></a>负采样</h4><p><img src="/images/negative-sampling-1.png" alt="negative-sampling-1"></p><p><img src="/images/negative-sampling-2.png" alt="negative-sampling-2"></p><p><img src="/images/negative-sampling-3.png" alt="negative-sampling-3"></p><h4 id="层序softmax"><a href="#层序softmax" class="headerlink" title="层序softmax"></a>层序softmax</h4><p>一、h-softmax</p><p>在面对label众多的分类问题时，fastText设计了一种hierarchical softmax函数。使其具有以下优势：</p><p>（1）适合大型数据+高效的训练速度：能够训练模型“在使用标准多核CPU的情况下10分钟内处理超过10亿个词汇”，特别是与深度模型对比，fastText能将训练时间由数天缩短到几秒钟。<br>（2）支持多语言表达：利用其语言形态结构，fastText能够被设计用来支持包括英语、德语、西班牙语、法语以及捷克语等多种语言。<br>可以认为，FastText= （word2vec中）CBOW + h-softmax；其结构为：输入 - 隐层 - h-softmax</p><p>基本原理</p><p>根据标签（label）和频率建立霍夫曼树；（label出现的频率越高，Huffman树的路径越短）<br>Huffman树中每一叶子结点代表一个label； </p><p>二、理论分析</p><p>层次之间的映射</p><p>将输入层中的词和词组构成特征向量，再将特征向量通过线性变换映射到隐藏层，隐藏层通过求解最大似然函数，然后根据每个类别的权重和模型参数构建Huffman树，将Huffman树作为输出。 </p><p>模型的训练</p><p>Huffman树中每一叶子结点代表一个label，在每一个非叶子节点处都需要作一次二分类，走左边的概率和走右边的概率，这里用逻辑回归的公式表示 </p><p>模型的训练</p><p>Huffman树中每一叶子结点代表一个label，在每一个非叶子节点处都需要作一次二分类，走左边的概率和走右边的概率，这里用逻辑回归的公式表示 </p><p>模型的训练</p><p>Huffman树中每一叶子结点代表一个label，在每一个非叶子节点处都需要作一次二分类，走左边的概率和走右边的概率，这里用逻辑回归的公式表示<br> <br><img src="/images/h-softmax-1.png" alt="h-softmax-1"></p><p>how fast</p><p><img src="/images/h-softmax-2.png" alt="h-softmax-2"></p><h2 id="word2vec实现方式"><a href="#word2vec实现方式" class="headerlink" title="word2vec实现方式"></a>word2vec实现方式</h2><h2 id="wordvrc优化方式"><a href="#wordvrc优化方式" class="headerlink" title="wordvrc优化方式"></a>wordvrc优化方式</h2><h2 id="word2vec实战"><a href="#word2vec实战" class="headerlink" title="word2vec实战"></a>word2vec实战</h2><h2 id="fasttext"><a href="#fasttext" class="headerlink" title="fasttext"></a>fasttext</h2><h2 id="Glove"><a href="#Glove" class="headerlink" title="Glove"></a>Glove</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pytorch&quot;&gt;&lt;a href=&quot;#pytorch&quot; class=&quot;headerlink&quot; title=&quot;pytorch&quot;&gt;&lt;/a&gt;pytorch&lt;/h1&gt;&lt;p&gt;有关pytorch的学习网站：&lt;a href=&quot;https://pytorch-cn.readthe</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>tomcat</title>
    <link href="http://example.com/2021/05/15/tomcat/"/>
    <id>http://example.com/2021/05/15/tomcat/</id>
    <published>2021-05-15T07:59:57.849Z</published>
    <updated>2021-05-15T08:03:02.156Z</updated>
    
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="tomcat" scheme="http://example.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>nginx-use</title>
    <link href="http://example.com/2021/05/11/nginx-use/"/>
    <id>http://example.com/2021/05/11/nginx-use/</id>
    <published>2021-05-11T12:56:45.502Z</published>
    <updated>2021-05-15T10:24:58.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nginx使用教程"><a href="#nginx使用教程" class="headerlink" title="nginx使用教程"></a>nginx使用教程</h1><p>本nginx是在Ubuntu20.04系统下运行的<br>nginx version: nginx/1.18.0 (Ubuntu)</p><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><p>1.安装nginx的方法直接apt install nginx就可以<br>我们下面来看详细配置情况<br>当我们安装完nginx以后，可以在/etc/nginx中找到其配置情况<br>nginx.conf是它的配置文件,其中引入了confd.d/下的所有.conf文件<br>然后它的站点配置信息由sites-enabled/default这个文件配置,拿到这个站点文件之后就可以在里面生命server{}的站点配置<br>2.还有另外一种安装方式，先将它的安装打包文件传到服务器中，然后解压后进入文件./configure &amp;&amp;make&amp;&amp; make install<br>下面有几条相关的命令<br>启动：nginx 或者 nginx -c /配置文件的路径</p><p>  停止: nginx -s stop</p><p>  重启: nginx -s reload</p><p>  检查配置文件: nginx -t</p><p>  查看nginx启动情况: ps -ef | grep nginx</p><p>  如果出现报错<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx: [error] invalid PID number &quot;&quot; in &quot;/run/nginx.pid&quot;</span><br></pre></td></tr></table></figure></p><p>  需要先执行</p><p>  nginx -c /etc/nginx/nginx.conf</p><p>  nginx.conf文件的路径可以从nginx -t的返回中找到。</p><p>  nginx -s reload</p><p>  如果以上没用，则直接kill调nginx里面的进程</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>  注:nginx的配置文件在安装后的nginx目录下的conf文件夹中</p><h3 id="一-刚安装好的配置文件具体如下"><a href="#一-刚安装好的配置文件具体如下" class="headerlink" title="(一):刚安装好的配置文件具体如下:"></a>(一):刚安装好的配置文件具体如下:</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">#user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">    <span class="comment">#                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       443 ssl;</span></span><br><span class="line">    <span class="comment">#    server_name  localhost;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_certificate      cert.pem;</span></span><br><span class="line">    <span class="comment">#    ssl_certificate_key  cert.key;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="comment">#    ssl_session_timeout  5m;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span></span><br><span class="line">    <span class="comment">#    ssl_prefer_server_ciphers  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述是由安装包（第二种方法安装后的配置文件）<br>用第一种安装后的配置文件更加解耦化，有多个文件include而成，上诉有解释。配置相关差不多。</p><h3 id="二-配置详解"><a href="#二-配置详解" class="headerlink" title="(二)配置详解"></a>(二)配置详解</h3><p>1、根据上面的nginx配置文件,可以将nginx的配置分为以下的组成结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">... <span class="comment">#全局快</span></span><br><span class="line">events &#123;  <span class="comment">#events快</span></span><br><span class="line">&#125;</span><br><span class="line">http&#123; <span class="comment">#http块</span></span><br><span class="line">    server &#123; <span class="comment">#server快</span></span><br><span class="line">        location &#123; <span class="comment">#location快</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、每块的结构功能</p><p>  (1)、全局块: 配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p><p>  (2)、events块: 配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，  开启多个网络连接序列化等</p><p>  (3)、http块: 可以配置多个server,配置代理、缓存、日志定义等能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。 </p><p>  (4)、server块: 配置虚拟主机的相关参数，一个http中可以有多个server。</p><p>  (5)、location块: 配置请求的路由，以及各种页面的处理情况。</p><p>3、nginx配置文件详细的解释</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">########### 每个指令必须有分号结束。#################</span></span><br><span class="line"><span class="comment">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span></span><br><span class="line"><span class="comment">#worker_processes 2;  #允许生成的进程数，默认为1</span></span><br><span class="line"><span class="comment">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span></span><br><span class="line">error_log <span class="built_in">log</span>/error.log debug;  <span class="comment">#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   <span class="comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    multi_accept on;  <span class="comment">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    <span class="comment">#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">    worker_connections  1024;    <span class="comment">#最大连接数，默认为512</span></span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    default_type  application/octet-stream; <span class="comment">#默认文件类型，默认为text/plain</span></span><br><span class="line">    <span class="comment">#access_log off; #取消服务日志    </span></span><br><span class="line">    log_format myFormat <span class="string">&#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;</span>; <span class="comment">#自定义格式</span></span><br><span class="line">    access_log <span class="built_in">log</span>/access.log myFormat;  <span class="comment">#combined为日志格式的默认值</span></span><br><span class="line">    sendfile on;   <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span></span><br><span class="line">    sendfile_max_chunk 100k;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span></span><br><span class="line">    keepalive_timeout 65;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块。</span></span><br><span class="line"></span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  <span class="comment">#热备</span></span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; <span class="comment">#错误页</span></span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; <span class="comment">#单连接请求上限次数。</span></span><br><span class="line">        listen       4545;   <span class="comment">#监听端口</span></span><br><span class="line">        server_name  127.0.0.1;   <span class="comment">#监听地址       </span></span><br><span class="line">        location  ~*^.+$ &#123;       <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span></span><br><span class="line">           <span class="comment">#root path;  #根目录</span></span><br><span class="line">           <span class="comment">#index vv.txt;  #设置默认页</span></span><br><span class="line">           proxy_pass  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">           deny 127.0.0.1;  <span class="comment">#拒绝的ip</span></span><br><span class="line">           allow 172.18.5.54; <span class="comment">#允许的ip           </span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="以上都是没有成功之前的一些文案，下面是一些在配置过程中出现并且了解的知识点"><a href="#以上都是没有成功之前的一些文案，下面是一些在配置过程中出现并且了解的知识点" class="headerlink" title="以上都是没有成功之前的一些文案，下面是一些在配置过程中出现并且了解的知识点"></a>以上都是没有成功之前的一些文案，下面是一些在配置过程中出现并且了解的知识点</h2><p>在配置使用命令行进行的文件结构中<br>etc/nginx下面有两个主要引入的配置文件：<br>1.第一个是conf.d中的文件<br>2.第二个是site-enables中的文件，其中site-enable的文件就是对site-avalible中的文件的链接，直接对site-avalible中的文件进行修改就可以<br>在初始化的时候，conf.d中是没有default文件的，需要自己写相关的配置文件，这个的格式可以copy site-enables中的文件。之前一直在徘徊的问题也是这个，使用的格式一直不对。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should look at the following URL&#x27;s in order to grasp a solid understanding</span></span><br><span class="line"><span class="comment"># of Nginx configuration files in order to fully unleash the power of Nginx.</span></span><br><span class="line"><span class="comment"># https://www.nginx.com/resources/wiki/start/</span></span><br><span class="line"><span class="comment"># https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/</span></span><br><span class="line"><span class="comment"># https://wiki.debian.org/Nginx/DirectoryStructure</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In most cases, administrators will remove this file from sites-enabled/ and</span></span><br><span class="line"><span class="comment"># leave it as reference inside of sites-available where it will continue to be</span></span><br><span class="line"><span class="comment"># updated by the nginx packaging team.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This file will automatically load configuration files provided by other</span></span><br><span class="line"><span class="comment"># applications, such as Drupal or Wordpress. These applications will be made</span></span><br><span class="line"><span class="comment"># available underneath a path with that package name, such as /drupal8.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Default server configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line">        <span class="comment"># SSL configuration</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># listen 443 ssl default_server;</span></span><br><span class="line">        <span class="comment"># listen [::]:443 ssl default_server;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Note: You should disable gzip for SSL traffic.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/773332</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Read up on ssl_ciphers to ensure a secure configuration.</span></span><br><span class="line">        <span class="comment"># See: https://bugs.debian.org/765782</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Self signed certs generated by the ssl-cert package</span></span><br><span class="line">        <span class="comment"># Don&#x27;t use them in a production server!</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># include snippets/snakeoil.conf;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#这里很关键，要定在文件渲染之后对目录中，后面要求对location是/，以后直接用地址加端口号就可以访问了</span></span><br><span class="line">        root /home/web/hexo/public;</span><br><span class="line">          <span class="comment"># Add index.php to the list if you are using PHP</span></span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name **.**.***.**;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                <span class="comment"># First attempt to serve request as file, then</span></span><br><span class="line">                <span class="comment"># as directory, then fall back to displaying a 404.</span></span><br><span class="line">                try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment"># pass PHP scripts to FastCGI server</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#       include snippets/fastcgi-php.conf;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#       # With php-fpm (or other unix sockets):</span></span><br><span class="line">        <span class="comment">#       fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;</span></span><br><span class="line">        <span class="comment">#       # With php-cgi (or other tcp sockets):</span></span><br><span class="line">        <span class="comment">#       fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#       deny all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不使用如下的情况应该可以直接在nginx中进行配置<br>这样直接地址加端口就能映射到整个文件了</p><h3 id="防火墙相关代码"><a href="#防火墙相关代码" class="headerlink" title="防火墙相关代码"></a>防火墙相关代码</h3><p>在linux中访问nginx，默认是不能访问的，因为防火墙问题，我们需要开放一部分端口号<br>查看开放的端口号:<br>开启防火墙<br>systemctl start firewalld<br>关闭防火墙<br>systemctl stop firewalld<br>查看端口开放情况<br>firewall-cmd –list-ports<br>开放某个特定的端口<br>firewall-cmd –zone=public –add-port=81/tcp –permanent<br>关闭某个特定的端口<br>firewall-cmd –remove-port=80/tcp –permanent<br>更改配置后重启防火墙<br>systemctl reload firewalld</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>1.准备工作<br>(1)准备两台 tomcat 服务器，一台 8080，一台 8081<br>(2)在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建 页面 a.html，用于测试<br>2.在 nginx 的配置文件中进行负载均衡的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">upstream myserver &#123;</span><br><span class="line">    server ***.***.***.***:port1</span><br><span class="line">    server ***.***.***.***:port2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80</span><br><span class="line">    server_name ********</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://myserver;</span><br><span class="line">        root </span><br><span class="line">        index </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.nginx 分配服务器策略<br>第一种 轮询(默认)<br>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。<br>第二种 weight<br>weight 代表权重默认为 1,权重越高被分配的客户端越多<br>第三种 ip_hash<br>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器<br>第四种 fair(第三方) 按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p>以后详细学习动态均衡和动静分离时继续更新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;nginx使用教程&quot;&gt;&lt;a href=&quot;#nginx使用教程&quot; class=&quot;headerlink&quot; title=&quot;nginx使用教程&quot;&gt;&lt;/a&gt;nginx使用教程&lt;/h1&gt;&lt;p&gt;本nginx是在Ubuntu20.04系统下运行的&lt;br&gt;nginx version</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="nginx" scheme="http://example.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>ai-study</title>
    <link href="http://example.com/2021/05/11/ai-study/"/>
    <id>http://example.com/2021/05/11/ai-study/</id>
    <published>2021-05-10T16:33:46.511Z</published>
    <updated>2021-05-10T16:42:10.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于ai学习的一些历程"><a href="#关于ai学习的一些历程" class="headerlink" title="关于ai学习的一些历程"></a>关于ai学习的一些历程</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于ai学习的一些历程&quot;&gt;&lt;a href=&quot;#关于ai学习的一些历程&quot; class=&quot;headerlink&quot; title=&quot;关于ai学习的一些历程&quot;&gt;&lt;/a&gt;关于ai学习的一些历程&lt;/h2&gt;</summary>
      
    
    
    
    <category term="学习记录" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="ai" scheme="http://example.com/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>ai-environment</title>
    <link href="http://example.com/2021/05/11/ai-env/"/>
    <id>http://example.com/2021/05/11/ai-env/</id>
    <published>2021-05-10T16:21:53.517Z</published>
    <updated>2021-05-15T12:03:57.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这个文档主要与pytorch等机器学习等python或者其他库等配置方法，和在服务器中的使用方法"><a href="#这个文档主要与pytorch等机器学习等python或者其他库等配置方法，和在服务器中的使用方法" class="headerlink" title="这个文档主要与pytorch等机器学习等python或者其他库等配置方法，和在服务器中的使用方法"></a>这个文档主要与pytorch等机器学习等python或者其他库等配置方法，和在服务器中的使用方法</h2><ol><li>用nvidia-smi来查看显卡的信息</li><li>接着用yum来安装python</li><li>安装annocoda环境，先下载包，然后bash即可，会自动帮你配置好文件</li><li>export PATH=”/home/‘user’/anaconda3/bin:$PATH”</li><li>conda create -n pytorch python=3.8</li><li>source activate pytorch</li><li>接着创建虚拟环境，用pip安装你想要的扩展包即可，注意与自己的cuda环境版本要一致</li><li>上传模型文件以及其他的训练材料</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;这个文档主要与pytorch等机器学习等python或者其他库等配置方法，和在服务器中的使用方法&quot;&gt;&lt;a href=&quot;#这个文档主要与pytorch等机器学习等python或者其他库等配置方法，和在服务器中的使用方法&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="命令技巧" scheme="http://example.com/categories/%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="ai" scheme="http://example.com/tags/ai/"/>
    
  </entry>
  
  <entry>
    <title>unix-order</title>
    <link href="http://example.com/2021/05/10/unix-order/"/>
    <id>http://example.com/2021/05/10/unix-order/</id>
    <published>2021-05-10T09:05:38.661Z</published>
    <updated>2021-05-15T08:03:03.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unix"><a href="#Unix" class="headerlink" title="Unix"></a>Unix</h1><h1 id="Unix-常用命令技巧（可配-linux-大部分命令）"><a href="#Unix-常用命令技巧（可配-linux-大部分命令）" class="headerlink" title="Unix 常用命令技巧（可配 linux 大部分命令）"></a>Unix 常用命令技巧（可配 linux 大部分命令）</h1><p>pwd：print work directory 打印工作目录</p><p>ls：查看当前文件夹文件 </p><p>​    -l：查看文件     -al：查看左右文件（包含以小数点开头的隐藏文件） </p><p>​    ls | more 分页展示当前文件夹中的所有文件</p><p>​    ls python* 这个就是使用正则表达式来搜索</p><p>​    ls | grep “python”将前面查询结果交由后面继续查询</p><p>​        ｜是管道符号，将前面命令结果交由后面的命令执行</p><p>​    ln：给文件建立链接</p><p>​            使用方式：ln -s 【源文件】【链接名】注意只能建立文件类型的链接不能建立文件夹类型的链接</p><p>​            【option】：-s：建立链接</p><p>​                       -f：存在覆盖，不存在则覆盖</p><p>find ：搜索查询文件</p><p>​        find 查询路径 选项 参数</p><p>​            比如find . -name “python”查询当前目录下所有名字中有关键字python的文件</p><p>​            各种查询方式可以从man中找到</p><p>cd：改变文件夹位置</p><p>​    加~回车 或者 直接回车：直接进入用户当前主目录</p><p>​    加/回车：进入用户根目录</p><p>who：查看当前系统的用户</p><p>​    whoami：当前登录用户</p><p>man：查看命令帮助手册</p><p>–help：查看命令选项(也就是放在指令后面)</p><p>history：罗列在终端窗口中操作的命令</p><p>touch：在当前文件目录中创建一个空文件</p><p>mkdir：在当前文件目录中创建一个文件夹，mkdir -p 可以用/来进行连续嵌套，比如mkdir -p /微信/user</p><p>tree：列出在本目录下，文件的树形图</p><p>rm：删除一个文件    rmdir：删除一个文件夹    rm -rf连级删除文件夹（文件夹里面        的东西也会删掉）。rm -rf * 删除当前文件夹中的所有文件，执行之前使pwd确认一下当前文件夹是哪个，一般在unix删除大量日志信息时，要确定在哪个文件夹。rm -rf /：永远不要执行，这个是删除根目录。</p><p>tar：打包解压命令 </p><p>​        -c：打包，将多个文件打包成一个文件，这个文件后缀名：.tar</p><p>​        -x ：解包，将.tar文件拆分成原始的多个文件</p><p>​        -t：查看.tar包中的所有文件</p><p>​        -v：展示操作过程信息</p><p>​        -f：不需要确认直接操作</p><p>​        tar -cvf ：文件.tar 要打包的多个文件列表</p><p>​        tar -tvf：查看包内多个文件</p><p>​        打包文件是为了统一整理文件，方便文件在移动/传输中最大程度的保证文件不损坏</p><p>gzip：压缩命令，压缩文件的名称，后缀名一般是：gz    通常情况下，和tar命令一起使用，tar命令打包文件，gzip压缩文件，得到.tar.tz，默认压缩的话会直接覆盖原文件</p><p>​        gzip -d：解压缩文件</p><p>​    tar -xzvf 文件.tar.gz：解压缩.tar.gz文件，解压的同时拆包，得到具体文件</p><p>bzip2：压缩解压命令，和tar命令一般结合使用，tar用于文件打包，bzip2用于压缩，压缩后的：.tar.bz2为后缀</p><p>zip | unzip :压缩与解压缩 </p><p>​        zip后缀：.zip 使用方法，zip 压缩后的名称 具体压缩文件列表; </p><p>​        unzip 使用方法：直接unzip 文件名</p><p>cp：copy复制文件的指令 具体使用方式为：cp 【当前文件夹内文件】 【复制到指定目录】</p><p>mv：剪切文件指令</p><p>more：查看文件中的内容</p><p>cat：直接查看文件内容，全部内容直接展示。</p><p>tail -f ：查看文件末尾的内容，默认展示10行内容，并且持续监视文件，如果文件中新增数据也会直接展示到屏幕中，通常用于监控内容的变化 </p><p>head：查看文件开头内容</p><p>grep：搜索查询的命令可以从文件中，列出包含查询文本的行</p><p>top：查看Unix/linux中的任务管理器</p><p>​        查看当前系统中正在运行的软件进程，以  及他们消耗的系统资源信息</p><p>ps：查看系统中的所有进程【process status进程状态】</p><p>​        通常情况下我们使用下面的命令</p><p>​        ps -ef | grep [具体进程名字]</p><p>kill：杀死进程</p><p>​    kill 进程编号</p><p>!! ：将上一个命令执行一下</p><p>!【所匹配符】：执行的最近的能匹配到的匹配符的指令</p><p>文件权限：<br><img src="/images/image-20210309220647820.png" alt="image-20210309220647820.png"></p><p>​在unix中对于用户来说只能操作自己目录下的文件</p><p><img src="/images/image-20210309221210006.png" alt="image-20210309221210006"></p><p><img src="/images/image-20210309221541565.png" alt="image-20210309221541565"></p><p><img src="/images/image-20210309222228349.png" alt="image-20210309222228349"></p><h2 id="mac-本地文件与服务器Linux文件之间的相互传输"><a href="#mac-本地文件与服务器Linux文件之间的相互传输" class="headerlink" title="mac 本地文件与服务器Linux文件之间的相互传输"></a>mac 本地文件与服务器Linux文件之间的相互传输</h2><p>可以简单用scp 命令来实现</p><p>查看scp帮助：sup -h</p><p>输出信息如下：usage: scp [-12346BCEpqrv] [-c cipher] [-F ssh_config] [-i identity_file]  [-l limit] [-o ssh_option] [-P port] [-S program][[user@]host1:]file1 … [[user@]host2:]file2</p><p>OPTIONS：</p><p>-v  显示进度。可以用来查看连接、认证、或是配置错误</p><p>-P 选择端口</p><p>-r 复制目录</p><p>1、从本地将文件传输到服务器<br>scp[本地文件的路径]   [服务器用户名]@[服务器地址]:[服务器上存放文件的路径]</p><p>scp /Users/mac/Desktop/test.txt <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#49;&#x2e;&#49;">&#x72;&#111;&#x6f;&#116;&#64;&#x31;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#46;&#49;&#x2e;&#49;</a>:/root</p><p>2、从本地将文件夹传输到服务器<br>scp -r[本地文件的路径]   [服务器用户名]@[服务器地址]:[服务器上存放文件的路径]</p><p>scp -r /Users/mac/Desktop/test <a href="mailto:&#x72;&#111;&#111;&#116;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#56;&#46;&#49;&#46;&#x31;">&#x72;&#111;&#111;&#116;&#x40;&#49;&#57;&#x32;&#46;&#49;&#x36;&#56;&#46;&#49;&#46;&#x31;</a>:/root</p><p>3、将服务器上的文件传输到本地<br>scp [服务器用户名]@[服务器地址]:[服务器上存放文件的路径]   [本地文件的路径]</p><p>scp <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#x31;&#x2e;&#x31;">&#114;&#111;&#111;&#116;&#64;&#49;&#x39;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#x31;&#x2e;&#x31;</a>:/root/default/test.txt /Users/mac/Desktop</p><p>4、将服务器上的文件夹传输到本地<br>scp -r [服务器用户名]@[服务器地址]:[服务器上存放文件的路径]   [本地文件的路径]</p><p>scp -r <a href="mailto:&#114;&#111;&#x6f;&#x74;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x31;&#46;&#49;">&#114;&#111;&#x6f;&#x74;&#64;&#49;&#57;&#x32;&#x2e;&#49;&#54;&#x38;&#46;&#x31;&#46;&#49;</a>:/root/default/test /Users/mac/Desktop</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Unix&quot;&gt;&lt;a href=&quot;#Unix&quot; class=&quot;headerlink&quot; title=&quot;Unix&quot;&gt;&lt;/a&gt;Unix&lt;/h1&gt;&lt;h1 id=&quot;Unix-常用命令技巧（可配-linux-大部分命令）&quot;&gt;&lt;a href=&quot;#Unix-常用命令技巧（可配-lin</summary>
      
    
    
    
    <category term="命令技巧" scheme="http://example.com/categories/%E5%91%BD%E4%BB%A4%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="unix" scheme="http://example.com/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>hello hexo</title>
    <link href="http://example.com/2021/05/08/hello-world/"/>
    <id>http://example.com/2021/05/08/hello-world/</id>
    <published>2021-05-08T08:52:00.684Z</published>
    <updated>2021-05-10T16:42:05.309Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章介绍了如何使用hexo博客以及配置相关的内容（包括统计插件，评论插件等）：</p><h2 id="安装并发布hexo"><a href="#安装并发布hexo" class="headerlink" title="安装并发布hexo"></a>安装并发布hexo</h2><p>安装hexo：npm install -g hexo-cli<br>检查是否安装成功：hexo -v<br>初始化网址：hexo init<br>接着输入 npm install 来安装这个网址所需要的依赖插件：npm install<br>生成静态网页：hexo g<br>开启本地服务器：hexo s<br>自动部署插件：npm install hexo-deployer-git  –save<br>自动更新文件：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br>Hexo常用命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">&quot;一个新的文章&quot;</span>    <span class="comment">#这是创建新的文章的命令</span></span><br><span class="line">hexo g    <span class="comment">#生成静态网页</span></span><br><span class="line">hexo s    <span class="comment">#启动本地服务</span></span><br><span class="line">hexo d    <span class="comment">#部署到github或别地方</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a><br>More info: <a href="https://hexo.io/docs/server.html">Server</a><br>More info: <a href="https://hexo.io/docs/generating.html">Generating</a><br>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h2 id="配置统计信息"><a href="#配置统计信息" class="headerlink" title="配置统计信息"></a>配置统计信息</h2><p>然后接下来就是配置一下如何进行在线观看人数的配置<br>我们会使用到LeanCloud进行移动应用的配置<br>1.注册创建一个leanCloud的应用<br>2.配置LeanCloud<br>进入新创建好的应用，点击存储，这时需要创建名为Counter的class用来存储访问博客的数据，例如：访问次数，最新访问时间等信息。class类名必须为Counter，主要为了与next主题相兼容，否则无法接收到相关数据。为了避免后续因为权限的问题导致次数统计显示不正常，ACL权限选择无限制（所有人可读可写）<br>3.​ 在所有应用中获取当前新建应用的app_id和app_key<br>4.修改博客根目录-&gt;themes-&gt;next-&gt;_config.yml文件，app_id和app_key是上图获取到的，找到如下代码替换app_id和app_key并将enable改为true，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Show number of visitors to each article.</span></span><br><span class="line"><span class="comment"># You can visit https://leancloud.cn get AppID and AppKey.</span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  app_id: <span class="comment">#AppID</span></span><br><span class="line">  app_key: <span class="comment">#AppKey //注意这里一定要是字符串类型的</span></span><br></pre></td></tr></table></figure><p>配置完成后重新部署hexo即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>5.此处配置完成之后还要配置一下卜算子的这个主题插件的配置<br>对于leancloud_count，你必须设置appid、appkey；对于busuanzi_count，你只需要开启它即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_count</span></span><br><span class="line">leancloud_count:</span><br><span class="line">+   <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">+   appid: <span class="string">&#x27;dXz&#x27;</span></span><br><span class="line">+    appkey: <span class="string">&#x27;wzG&#x27;</span></span><br><span class="line">    like_post:</span><br><span class="line">        <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">+   visit_post:</span><br><span class="line">        <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    topN_post: </span><br><span class="line">        <span class="built_in">enable</span>: <span class="literal">true</span> <span class="comment">#param1 for topN_post</span></span><br><span class="line">        <span class="built_in">limit</span>: 10 <span class="comment">#param2 for topN_post</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html">参考资料</a></p><h2 id="配置评论插件Gitalk"><a href="#配置评论插件Gitalk" class="headerlink" title="配置评论插件Gitalk"></a>配置评论插件Gitalk</h2><p>下面我们开始配置评论插件Gitalk<br>1.首先我们需要设置一个github仓库用来存放评论<br>2.然后用申请一个Oauth application<a href="https://github.com/settings/applications/new">链接</a>申请之后拿到Client ID以及Client secrets<br>3.然后对hexo中themes中对_config.yml进行简单的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    clientID: <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    clientSecret: <span class="string">&#x27;&#x27;</span> </span><br><span class="line">    repo: [之前创建的仓库名]</span><br><span class="line">    owner: 创建的仓库的owner</span><br><span class="line">    admin: 创建的仓库的admin</span><br><span class="line">    distractionFreeMode: <span class="literal">true</span></span><br><span class="line">    <span class="comment">#去除 more、index.html、?query=123等格式尾部 </span></span><br><span class="line">    hrefTrimend: <span class="string">&#x27;#.*$,\\?.*$,index.html$&#x27;</span> </span><br></pre></td></tr></table></figure><p>注意的是这个可能建立之后不能立即评论，需要初始化一下评论，简单的来说就是管理员和仓库owner都登陆一遍差不多就可以了<br><a href="https://github.com/gitalk/gitalk/issues">issues</a></p><h2 id="live2d插件（动态2d效果）"><a href="#live2d插件（动态2d效果）" class="headerlink" title="live2d插件（动态2d效果）"></a>live2d插件（动态2d效果）</h2><p>1.安装Live2D插件：npm install –save hexo-helper-live2d<br>然后安装喜欢的动画：npm install xxxxxx<br>下面是安装的列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><p>2.修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Live2D动画</span></span><br><span class="line">live2d:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  scriptFrom: <span class="built_in">local</span></span><br><span class="line">  pluginRootPath: live2dw/</span><br><span class="line">  pluginJsPath: lib/</span><br><span class="line">  pluginModelPath: assets/</span><br><span class="line">  tagMode: <span class="literal">false</span></span><br><span class="line">  debug: <span class="literal">false</span></span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-shizuku</span><br><span class="line">  display:</span><br><span class="line">    position: right </span><br><span class="line">    width: 150</span><br><span class="line">    height: 300</span><br><span class="line">  mobile:</span><br><span class="line">    show: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>主要参数说明</p><p>enable //是否使用<br>model:<br>use: live2d-widget-model-shizuku //要使用的模型名称<br>display:<br>position: right //显示的位置<br>width: 150 //宽度<br>height: 150 //高度<br>mobile:<br>show: true //移动端是否显示</p><h2 id="其他使用的命令"><a href="#其他使用的命令" class="headerlink" title="其他使用的命令"></a>其他使用的命令</h2><p>创建分类页：hexo new page categories </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2019-03-30 19:25:34</span><br><span class="line">+ layout: categories</span><br><span class="line">+ <span class="built_in">type</span>: categories</span><br></pre></td></tr></table></figure><p>创建标签页：hexo new page tags</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: tags</span><br><span class="line">date: 2019-03-30 19:25:34</span><br><span class="line">+ layout: tags</span><br><span class="line">+ <span class="built_in">type</span>: tags</span><br></pre></td></tr></table></figure><p>创建关于页：hexo new page about</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: about</span><br><span class="line">date: 2019-03-30 19:25:34</span><br><span class="line">+ layout: about</span><br><span class="line">+ <span class="built_in">type</span>: about</span><br></pre></td></tr></table></figure><p>创建相册页：hexo new page gallery</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: gallery</span><br><span class="line">date: 2019-03-30 19:25:34</span><br><span class="line">+ layout: gallery</span><br><span class="line">+ <span class="built_in">type</span>: gallery</span><br></pre></td></tr></table></figure><p>打开文件data.json（Annie/source/plugin/gallerypage/data.json）, 按照json语法在数组[……]中添加gallery的图片数据，请设置合适的eWidth、eHeight的值。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;&#125;, </span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;thumbnail&quot;</span>: <span class="string">&quot;https://img.jpg&quot;</span>,     //小图路径</span><br><span class="line">        <span class="string">&quot;enlarged&quot;</span>: <span class="string">&quot;https://img.jpg&quot;</span>, //大图路径（可与小图一致）</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;百里守约&quot;</span>,//图片标题</span><br><span class="line">        <span class="string">&quot;categories&quot;</span>: [&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: 9,//根据id来进行分类</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;百里玄策&quot;</span>,</span><br><span class="line">                <span class="string">&quot;photo_count&quot;</span>: 41787, //可忽略</span><br><span class="line">                <span class="string">&quot;links&quot;</span>: &#123;//可忽略</span><br><span class="line">                    <span class="string">&quot;self&quot;</span>: <span class="string">&quot;https://img.jpg&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;photos&quot;</span>: <span class="string">&quot;https://img.jpg&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;tWidth&quot;</span>: 800.6130030959752,//小图相对宽度</span><br><span class="line">        <span class="string">&quot;tHeight&quot;</span>: 500,   //小图相对高度</span><br><span class="line">        <span class="string">&quot;eWidth&quot;</span>: 3630,   //大图相对宽度</span><br><span class="line">        <span class="string">&quot;eHeight&quot;</span>: 2907   //大图相对高度</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;&#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><p>当然，你可以将该文件data.json移至其他目录，相应地修改路径gallery_data</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gallery page</span></span><br><span class="line"><span class="comment"># gallery_format: natural | square</span></span><br><span class="line">gallery_format: natural</span><br><span class="line"><span class="comment"># one time to load 4 rows or other count, 0 to load img automatically when scrolling.(0,1,2,3,4,5,6......)</span></span><br><span class="line">gallery_limit: 0</span><br><span class="line"><span class="comment"># data url</span></span><br><span class="line">+ gallery_data: plugin/gallerypage/data.json</span><br></pre></td></tr></table></figure><p>创建站内搜索：npm install hexo-generator-search-zip –save<br>编辑站点目录下的_config.yml，添加如下语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.json</span><br><span class="line">  zipPath: search.zip</span><br><span class="line">  versionPath: searchVersion.txt</span><br><span class="line">  field: post</span><br><span class="line">  <span class="comment">#field: post, page or all（3个可选参数）</span></span><br></pre></td></tr></table></figure><p>编辑主题目录下的_config.yml，添加如下语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/flashlab/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># if auto, trigger search by changing input</span></span><br><span class="line">    <span class="comment"># if manual, trigger search by pressing enter key or search button</span></span><br><span class="line">    trigger: auto</span><br><span class="line">    <span class="comment"># show top n results per article, show all results by setting to -1</span></span><br><span class="line">    top_n_per_article: 2</span><br></pre></td></tr></table></figure><h2 id="下面描述一下博客md文档生成时会出现的错误"><a href="#下面描述一下博客md文档生成时会出现的错误" class="headerlink" title="下面描述一下博客md文档生成时会出现的错误"></a>下面描述一下博客md文档生成时会出现的错误</h2><p>1.首先是图片问题，可能出现图片上传然后渲染不出来的情况<br>  下面是解决方法<br>  第一步（简单配置）：<br>  （1）把主页配置文件_config.yml 里的post_asset_folder:这个选项设置为true<br>  （2）在你的hexo目录下执行这样一句话npm install hexo-asset-image –save，这是下载安装一个可以上传本地图片的插件<br>  （3）等待一小段时间后，再运行hexo n “xxxx”来生成md博文时，/source/_posts文件夹内除了xxxx.md文件还有一个同名的文件夹<br>  第二步（如何使用）：<br>  （4）最后在xxxx.md中想引入图片时，先把图片复制到xxxx这个文件夹中，然后只需要在xxxx.md中按照markdown的格式引入图片：!【你想输入的替代文字】(xxxx/图片名.jpg)<br>  注意： xxxx是这个md文件的名字，也是同名文件夹的名字。只需要有文件夹名字即可，不需要有什么绝对路径。你想引入的图片就只需要放入xxxx这个文件夹内就好了，很像引用相对路径<br>  （5）最后检查一下，hexo g生成页面后，进入public\2017\02\26\index.html文件中查看相关字段，可以发现，html标签内的语句是<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;2017/02/26/xxxx/图片名.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><br>  而不是<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;xxxx/图片名.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><br>  这很重要，关乎你的网页是否可以真正加载你想插入的图片。</p><p>  经过一段时间的努力，上面的操作没有奏效qwq<br>  于是开始想用另外一种方法，将图片存放在云上以http网址访问，这种还没开始弄，以后弄好后会更新<br>  另外一种比较朴素的方法是将所要使用的图片保存到source目录下，新建一个images文件夹，然后在这里面存放，经过编译以后，这个文件会直接放在根目录上面，以后调用的时候直接用 /images/xxx.jpg 的路径就可以了</p><p>【完结撒花】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本篇文章介绍了如何使用hexo博客以及配置相关的内容（包括统计插件，评论插件等）：&lt;/p&gt;
&lt;h2 id=&quot;安装并发布hexo&quot;&gt;&lt;a href=&quot;#安装并发布hexo&quot; class=&quot;headerlink&quot; title=&quot;安装并发布hexo&quot;&gt;&lt;/a&gt;安装并发布hexo&lt;</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
</feed>
